# -*- coding: utf-8 -*-
"""BusinessStatistic- A/B test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13VrCA-v2Lf6c_W9BAJnqtWc5PerSUWAx

Part 1
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

##### PRIOR DISTRIBUTION ######

# Starting parameters
alpha = 1
beta = 1
n = 766

# Create x values for plotting
x = np.linspace(0, 1, n)

# Prior distribution
prior_dark = stats.beta(alpha, beta).pdf(x)  # Uniform prior

##### POSTERIOR DISTRIBUTION DARK ######

rA_dark = 299
rB_dark = n - rA_dark

An_dark = alpha + rA_dark
Bn_dark = beta + rB_dark

EphiA_dark = An_dark / (Bn_dark + An_dark)
VARphiA_dark = (An_dark * Bn_dark) / ((An_dark + Bn_dark)**2 * (An_dark + Bn_dark + 1))
std_posterior_dark = np.sqrt(VARphiA_dark)

posterior_dark = stats.norm(EphiA_dark, std_posterior_dark).pdf(x)

##### POSTERIOR DISTRIBUTION HAPPY ######

rA_happy = 265
rB_happy = n - rA_happy

An_happy = alpha + rA_happy
Bn_happy = beta + rB_happy

EphiA_happy = An_happy / (Bn_happy + An_happy)
VARphiA_happy = (An_happy * Bn_happy) / ((An_happy + Bn_happy)**2 * (An_happy + Bn_happy + 1))
std_posterior_happy = np.sqrt(VARphiA_happy)

posterior_happy = stats.norm(EphiA_happy, std_posterior_happy).pdf(x)

##### PLOT ######

plt.figure(figsize=(10, 6))

# Plot prior distribution
plt.plot(x, prior_dark, 'b-', lw=2, label=f'Prior: Beta({alpha}, {beta})')
plt.fill_between(x, prior_dark, alpha=0.2, color='blue')

# Plot posterior dark
plt.plot(x, posterior_dark, 'r-', lw=2, label='Posterior Dark')
plt.fill_between(x, posterior_dark, alpha=0.2, color='red')

# Plot posterior happy
plt.plot(x, posterior_happy, 'g-', lw=2, label='Posterior Happy')
plt.fill_between(x, posterior_happy, alpha=0.2, color='green')

# Vertical lines for dark
plt.axvline(x=EphiA_dark, color='r', linestyle='--', alpha=0.7, label='Posterior Mean Dark')
credible_interval_dark = stats.norm.interval(0.95, loc=EphiA_dark, scale=std_posterior_dark)
plt.axvline(x=credible_interval_dark[0], color='r', linestyle=':', alpha=0.7)
plt.axvline(x=credible_interval_dark[1], color='r', linestyle=':', alpha=0.7)

# Vertical lines for happy
plt.axvline(x=EphiA_happy, color='g', linestyle='--', alpha=0.7, label='Posterior Mean Happy')
credible_interval_happy = stats.norm.interval(0.95, loc=EphiA_happy, scale=std_posterior_happy)
plt.axvline(x=credible_interval_happy[0], color='g', linestyle=':', alpha=0.7)
plt.axvline(x=credible_interval_happy[1], color='g', linestyle=':', alpha=0.7)

# Customize the plot
plt.xlabel('Parameter Value', fontsize=12)
plt.ylabel('Probability Density', fontsize=12)
plt.title('Prior and Posterior Probability Distributions', fontsize=14)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

# set axis limits
plt.xlim(0, 0.6)
plt.ylim(0, max(np.max(prior_dark), np.max(posterior_dark), np.max(posterior_happy)) * 1.1)

plt.tight_layout()
plt.show()

print(f"Credible Interval for Dark:  ({credible_interval_dark[0]:.4f}, {credible_interval_dark[1]:.4f})")
print(f"Credible Interval for Happy: ({credible_interval_happy[0]:.4f}, {credible_interval_happy[1]:.4f})")

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from scipy.stats import norm

# Supponendo che EphiA_happy, EphiA, VARphiA_happy e VARphiA siano già definiti:
E_diff = EphiA_dark - EphiA_happy
VAR_diff = VARphiA_happy + VARphiA_dark

print("Media:", E_diff)
print("Varianza:", VAR_diff)

# Calcola la deviazione standard
std_diff = np.sqrt(VAR_diff)

# Genera x_diff intorno alla media (±4 deviazioni standard)
x_diff = np.linspace(-0.4,0.4)      #(E_diff - 4*std_diff, E_diff + 4*std_diff, 500)
diff = stats.norm(loc=E_diff, scale=std_diff).pdf(x_diff)

# Crea il grafico
plt.figure(figsize=(10, 6))

# Distribuzione Posterior
plt.plot(x_diff, diff, 'blue', lw=2, label='Posterior Distribution of the Difference')
plt.fill_between(x_diff, diff, alpha=0.2, color='blue')

# Linea verticale sulla media
plt.axvline(x=E_diff, color='blue', linestyle='--', alpha=0.7, label='Posterior Mean')
credible_interval_diff = stats.norm.interval(0.95, loc=E_diff, scale=std_diff)
plt.axvline(x=credible_interval_diff[0], color='blue', linestyle=':', alpha=0.7)
plt.axvline(x=credible_interval_diff[1], color='blue', linestyle=':', alpha=0.7,
            label='95% Credible Interval')

plt.axvline(x=0, color='black', linestyle='-', alpha=0.7, label='Zero Effect')

# Personalizzazione grafico
plt.xlabel('Parameter Value', fontsize=12)
plt.ylabel('Probability Density', fontsize=12)
plt.title('Posterior Probability Distribution of the difference between Happy and Dark', fontsize=14)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()


prob_0_plus = norm.sf(0,loc=E_diff, scale=std_diff)

print(f"95% Credible Interval: [{credible_interval_diff[0]:.4f}, {credible_interval_diff[1]:.4f}]")
print(f"Probability of pi_grec > 0: {prob_0_plus:.4f}")

"""# Part 3

Import the Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Import the Dataset"""

import pandas as pd

# Percorso del file su Google Drive
file_path = '/content/drive/MyDrive/A B test/ABTestData.xlsx'

# Lettura dello sheet "Sheet1"
df = pd.read_excel(file_path, sheet_name='Sheet1')

# Visualizza le prime righe del DataFrame
df.head()

"""## Divide the dataset's observations by 2"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
'''
n_new = int(len(df) / 2)
# df_new ha solo la metà delle osservazioni originali
df_new = df[:n_new]
print(len(df_new))
'''

"""## Plot Happy and Bright posterior distribution"""

df_new=df

# Condizione Dark (happyBright = 0)
rA_dark = df_new.loc[df_new['happyBright'] == 0, 'hit'].sum()
print(f"Numero di '1' in 'hit' quando 'happyBright' è 0: {rA_dark}")
rB_dark = len(df_new[df_new['happyBright'] == 0]) - rA_dark

# Condizione Happy (happyBright = 1)
rA_happy = df_new.loc[df_new['happyBright'] == 1, 'hit'].sum()
print(f"Numero di '1' in 'hit' quando 'happyBright' è 1: {rA_happy}")
rB_happy = len(df_new[df_new['happyBright'] == 1]) - rA_happy

alpha = 1
beta = 1

# Calcoli per condizione Dark
An_dark = alpha + rA_dark
Bn_dark = beta + rB_dark
EphiA_dark = (An_dark/(Bn_dark + An_dark))
VARphiA_dark = (An_dark*Bn_dark / ((An_dark + Bn_dark)**2 * (An_dark + Bn_dark + 1)))
std_posterior_dark = np.sqrt(VARphiA_dark)

# Calcoli per condizione Happy
An_happy = alpha + rA_happy
Bn_happy = beta + rB_happy
EphiA_happy = (An_happy/(Bn_happy + An_happy))
VARphiA_happy = (An_happy*Bn_happy / ((An_happy + Bn_happy)**2 * (An_happy + Bn_happy + 1)))
std_posterior_happy = np.sqrt(VARphiA_happy)

# Create x values for plotting
x = np.linspace(0, 1, 1000)

# Calculate prior and posterior distributions
prior = stats.beta(alpha, beta).pdf(x)  # Uniform prior
posterior_dark = stats.norm(EphiA_dark, std_posterior_dark).pdf(x)  # Posterior Dark
posterior_happy = stats.norm(EphiA_happy, std_posterior_happy).pdf(x)  # Posterior Happy

# Plot
plt.figure(figsize=(10, 6))
plt.plot(x, prior, 'b-', label='Prior (Beta(1,1))')
plt.plot(x, posterior_dark, 'r-', label=f'Posterior Dark (μ={EphiA_dark:.3f}, σ={std_posterior_dark:.3f})')
plt.plot(x, posterior_happy, 'g-', label=f'Posterior Happy (μ={EphiA_happy:.3f}, σ={std_posterior_happy:.3f})')
plt.xlabel('θ')
plt.ylabel('Densità')
plt.title('Distribuzioni Prior e Posterior')
plt.legend()
plt.grid(True)
plt.show()

"""## Loop plot Dark and Bright posterior distribution"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import pandas as pd

# Assumiamo che 'df' sia già caricato
# Se non è disponibile, possiamo crearne uno di esempio:
# df = pd.DataFrame({'happyBright': np.random.choice([0, 1], size=800),
#                   'hit': np.random.choice([0, 1], size=800)})

# Imposta il numero massimo di osservazioni
max_observations = 1500
# Imposta l'incremento
increment = 100

# Parametri per prior Beta
alpha = 1
beta = 1

# Preparazione per il plotting
fig, axs = plt.subplots(nrows=2, ncols=1, figsize=(12, 16))
colors_dark = plt.cm.Reds(np.linspace(0.3, 1, max_observations//increment))
colors_happy = plt.cm.Greens(np.linspace(0.3, 1, max_observations//increment))

# Crea x values per plotting
x = np.linspace(0, 1, 1000)

# Plot della distribuzione prior (uniforme)
prior = stats.beta(alpha, beta).pdf(x)
axs[0].plot(x, prior, 'k--', label='Prior (Beta(1,1))', linewidth=2)
axs[1].plot(x, prior, 'k--', label='Prior (Beta(1,1))', linewidth=2)

# Ciclo for per diverse dimensioni del campione
for i, n_new in enumerate(range(increment, max_observations + 1, increment)):
    # Assicurarsi che n_new non superi la dimensione del dataset
    if n_new > len(df):
        print(f"Attenzione: n_new ({n_new}) supera la dimensione del dataset ({len(df)}). Utilizzo {len(df)} osservazioni.")
        n_new = len(df)

    # Seleziona le prime n_new osservazioni
    df_new = df[:n_new]

    # 1. Calcoli per condizione Dark (happyBright = 0)
    # Conta hit=1 quando happyBright=0
    dark_subset = df_new[df_new['happyBright'] == 0]
    rA_dark = dark_subset['hit'].sum()
    rB_dark = len(dark_subset) - rA_dark

    An_dark = alpha + rA_dark
    Bn_dark = beta + rB_dark
    EphiA_dark = An_dark / (An_dark + Bn_dark)

    # 2. Calcoli per condizione Happy (happyBright = 1)
    # Conta hit=1 quando happyBright=1
    happy_subset = df_new[df_new['happyBright'] == 1]
    rA_happy = happy_subset['hit'].sum()
    rB_happy = len(happy_subset) - rA_happy

    An_happy = alpha + rA_happy
    Bn_happy = beta + rB_happy
    EphiA_happy = An_happy / (An_happy + Bn_happy)

    # Calcola le distribuzioni posteriori (usando Beta invece di normale per maggiore precisione)
    posterior_dark = stats.beta(An_dark, Bn_dark).pdf(x)
    posterior_happy = stats.beta(An_happy, Bn_happy).pdf(x)

    # Etichetta per la legenda
    label_dark = f'Dark n={n_new}, EphiA={EphiA_dark:.3f}'
    label_happy = f'Happy n={n_new}, EphiA={EphiA_happy:.3f}'

    # Plot distribuzione posteriore Dark
    axs[0].plot(x, posterior_dark, color=colors_dark[i], label=label_dark)

    # Plot distribuzione posteriore Happy
    axs[1].plot(x, posterior_happy, color=colors_happy[i], label=label_happy)

    # Stampa informazioni sul progresso
    print(f"Completata iterazione con n={n_new}. Dark: {EphiA_dark:.3f}, Happy: {EphiA_happy:.3f}")

# Configura i grafici
for i, condition in enumerate(['Dark', 'Happy']):
    axs[i].set_xlabel('θ (Probability of success)')
    axs[i].set_ylabel('Probability Density')
    axs[i].set_title(f'Evolution of the Posterior Distribution - {condition}')
    axs[i].legend(loc='upper left', bbox_to_anchor=(1, 1))
    axs[i].grid(True)

plt.tight_layout()
plt.savefig('evolution_posterior_distributions.png', dpi=300, bbox_inches='tight')
plt.show()

# Plot aggiuntivo per confrontare le distribuzioni finali
plt.figure(figsize=(10, 6))
plt.plot(x, prior, 'k--', label='Prior (Beta(1,1))', linewidth=2)
plt.plot(x, posterior_dark, 'r-', label=f'Dark finale (n={n_new}, E[phi]={EphiA_dark:.3f})')
plt.plot(x, posterior_happy, 'g-', label=f'Happy finale (n={n_new}, E[phi]={EphiA_happy:.3f})')
plt.xlabel('θ (Probability of success)')
plt.ylabel('Probability Density')
plt.title(f'Comparison of the Posterior Distributions (n={n_new})')
plt.legend()
plt.grid(True)
plt.savefig('final_comparison.png', dpi=300)
plt.show()

# Output per visualizzare i risultati finali
print(f"\nRisultati finali con {n_new} osservazioni:")
print(f"Condizione Dark:")
print(f"  - Successi: {rA_dark}, Fallimenti: {rB_dark}")
print(f"  - Stima probabilità di successo: {EphiA_dark:.4f}")
print(f"Condizione Happy:")
print(f"  - Successi: {rA_happy}, Fallimenti: {rB_happy}")
print(f"  - Stima probabilità di successo: {EphiA_happy:.4f}")
print(f"Differenza tra le condizioni: {abs(EphiA_happy - EphiA_dark):.4f}")

"""## Plot evoluzione distribuzione della differenza tra Happy e Bright"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
import pandas as pd

# Parametri iniziali
max_observations = 1500
increment = 100
alpha = 1
beta = 1
x_diff = np.linspace(-0.5, 0.5, 500)

# Liste per grafici e tabella
prob_0_plus_list = []
n_obs_list = []
summary_data = []  # per la tabella

# Primo grafico: distribuzioni
plt.figure(figsize=(12, 6))

for i, n_new in enumerate(range(increment, max_observations + 1, increment)):
    if n_new > len(df):
        print(f"Attenzione: n_new ({n_new}) supera la dimensione del dataset ({len(df)}).")
        n_new = len(df)

    df_new = df.iloc[:n_new]

    # DARK condition
    dark_subset = df_new[df_new['happyBright'] == 0]
    rA_dark = dark_subset['hit'].sum()
    rB_dark = len(dark_subset) - rA_dark

    An_dark = alpha + rA_dark
    Bn_dark = beta + rB_dark
    EphiA_dark = An_dark / (An_dark + Bn_dark)
    VARphiA_dark = (An_dark * Bn_dark) / (((An_dark + Bn_dark)**2) * (An_dark + Bn_dark + 1))

    # HAPPY condition
    happy_subset = df_new[df_new['happyBright'] == 1]
    rA_happy = happy_subset['hit'].sum()
    rB_happy = len(happy_subset) - rA_happy

    An_happy = alpha + rA_happy
    Bn_happy = beta + rB_happy
    EphiA_happy = An_happy / (An_happy + Bn_happy)
    VARphiA_happy = (An_happy * Bn_happy) / (((An_happy + Bn_happy)**2) * (An_happy + Bn_happy + 1))

    # Distribuzione della differenza
    E_diff = abs(EphiA_happy - EphiA_dark)
    VAR_diff = VARphiA_happy + VARphiA_dark
    std_diff = np.sqrt(VAR_diff)

    diff_pdf = norm(loc=E_diff, scale=std_diff).pdf(x_diff)
    plt.plot(x_diff, diff_pdf, label=f'N={n_new}', alpha=0.7)

    # Probabilità che pi_grec > 0
    prob_0_plus = norm.sf(0, loc=E_diff, scale=std_diff)
    prob_0_plus_list.append(prob_0_plus)
    n_obs_list.append(n_new)

    # Aggiunta alla tabella
    summary_data.append({'Numero Osservazioni': n_new, 'P( π_dark > π_happy )': round(prob_0_plus, 4)})


# Personalizzazione del primo grafico
plt.axvline(x=0, color='black', linestyle='--', label='Zero Difference')
plt.xlabel('Difference Posterior Means (Dark - Happy)', fontsize=12)
plt.ylabel('Probability Density', fontsize=12)
plt.title('Evolution of the Difference Between Conditions (Happy vs Dark)', fontsize=14)
plt.legend(title='Observation', fontsize=9)
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

# Secondo grafico: andamento della probabilità
plt.figure(figsize=(10, 5))
plt.plot(n_obs_list, prob_0_plus_list, marker='o', linestyle='-', color='lightblue', label='P(π_dark > π_happy)')
plt.axhline(y=0.9642, color='red', linestyle='--', linewidth=1.5, label='threshold = 0.96')  # Linea rossa tratteggiata
plt.xlabel('Number of observattion', fontsize=12)
plt.ylabel('Probability of π_dark > π_happy ', fontsize=12)
plt.title('Trend of P(π_dark > π_happy) with the Number of Observations', fontsize=14)
plt.ylim(0, 1.05)
plt.grid(True, alpha=0.3)
plt.legend(loc='lower right')  # Puoi cambiare la posizione se preferisci
plt.tight_layout()
plt.show()


# Visualizza la tabella finale
summary_df = pd.DataFrame(summary_data)
print("\nTabella delle probabilità P(π_dark > π_happy) per ogni numero di osservazioni:")
print(summary_df.to_string(index=False))